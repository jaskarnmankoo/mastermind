{"version":3,"file":"component---src-pages-index-tsx-093a9cc8339a95fc951c.js","mappings":"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","sources":["webpack://mastermind/./src/components/mastermind/Piece.tsx","webpack://mastermind/./src/components/row/Piece.tsx","webpack://mastermind/./src/components/row/index.tsx","webpack://mastermind/./src/components/solution/index.tsx","webpack://mastermind/./src/components/mastermind/index.tsx","webpack://mastermind/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\n\ninterface Props {\n  ariaLabel: string;\n  className: string;\n  piece: string;\n  setActivePiece: (value: React.SetStateAction<string>) => void;\n}\n\n/** Renders a Game Piece to select */\nexport default function Piece({\n  ariaLabel,\n  className,\n  piece,\n  setActivePiece\n}: Props): JSX.Element {\n  const onClick = React.useCallback(\n    () => setActivePiece(piece),\n    [piece, setActivePiece]\n  );\n\n  return (\n    <button\n      type=\"button\"\n      aria-label={ariaLabel}\n      className={className}\n      onClick={onClick}\n    />\n  );\n}\n","import * as React from 'react';\n\ninterface Props {\n  activePiece: string;\n  ariaLabel: string;\n  className: string;\n  currentRow: string[];\n  disabled: boolean;\n  piece: number;\n  setCurrentRow: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\n/** Renders a Piece in a Row */\nexport default function Piece({\n  activePiece,\n  ariaLabel,\n  className,\n  currentRow,\n  disabled,\n  piece,\n  setCurrentRow\n}: Props): JSX.Element {\n  const onClick = React.useCallback(() => {\n    const currentRowCopy = [...currentRow];\n    currentRowCopy[piece] = activePiece;\n    setCurrentRow(currentRowCopy);\n  }, [activePiece, currentRow, piece, setCurrentRow]);\n\n  return (\n    <button\n      type=\"button\"\n      aria-label={ariaLabel}\n      className={className}\n      disabled={disabled}\n      onClick={onClick}\n    />\n  );\n}\n","import * as React from 'react';\n\nimport Piece from './Piece';\n\nimport { determineHintColor } from '../../utils';\n\ninterface Props {\n  activePiece: string;\n  activeRow: number;\n  checkSolution: () => void;\n  currentRow: string[];\n  previousHints: React.MutableRefObject<number[][]>;\n  previousRows: React.MutableRefObject<string[][]>;\n  row: number;\n  setCurrentRow: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\n/** Renders a Row in Mastermind */\nexport default function Row({\n  activePiece,\n  activeRow,\n  checkSolution,\n  currentRow,\n  previousHints,\n  previousRows,\n  row,\n  setCurrentRow\n}: Props): JSX.Element {\n  let previousButtons: string[] = [];\n  let hints: number[] = [];\n\n  const isActive = activeRow === row;\n\n  if (previousRows.current[row]) previousButtons = previousRows.current[row];\n  if (previousHints.current[row]) hints = previousHints.current[row];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {isActive && (\n        <>\n          <h1>Attempt {activeRow + 1}</h1>\n          <button\n            type=\"button\"\n            className=\"game-mode mx-auto w-48\"\n            onClick={checkSolution}\n            disabled={\n              currentRow[0] === '' ||\n              currentRow[1] === '' ||\n              currentRow[2] === '' ||\n              currentRow[3] === ''\n            }\n          >\n            Check\n          </button>\n        </>\n      )}\n      {hints.length !== 0 && (\n        <div className=\"mx-auto flex w-full items-center justify-center\">\n          <p>Hints</p>&nbsp;\n          {hints.map((hint, index) => (\n            <span\n              className={`mx-1 h-1 w-1 rounded-full border-2 border-black p-1 dark:border-white ${determineHintColor(\n                hint\n              )}`}\n              key={`hint-${row}-${index}`}\n            />\n          ))}\n        </div>\n      )}\n      <div\n        className={`my-2 flex w-full items-center justify-center ${\n          isActive\n            ? 'rounded-lg border-2 border-solid border-black dark:border-white'\n            : ''\n        } ${previousButtons.length !== 0 ? 'my-0 p-2' : 'my-2 p-8'}`}\n      >\n        {previousButtons.length !== 0 ? (\n          <>\n            {previousButtons.map((button, index) => (\n              <div\n                className={`game-piece ${button}`}\n                key={`game-piece-${button}-${row}-${index}`}\n              />\n            ))}\n          </>\n        ) : (\n          <>\n            {[0, 1, 2, 3].map((button, index) => (\n              <React.Fragment key={`button-${index}`}>\n                <Piece\n                  activePiece={activePiece}\n                  ariaLabel={`peg ${isActive ? currentRow[button] : ''}`}\n                  className={`game-piece ${isActive ? currentRow[button] : ''}`}\n                  currentRow={currentRow}\n                  disabled={!isActive || activePiece === currentRow[button]}\n                  piece={button}\n                  setCurrentRow={setCurrentRow}\n                />\n              </React.Fragment>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\n\ninterface Props {\n  setDifficulty: React.Dispatch<React.SetStateAction<string>>;\n  solution: React.MutableRefObject<string[]>;\n}\n\n/** Renders the Mastermind solution */\nexport default function Solution({\n  setDifficulty,\n  solution\n}: Props): JSX.Element {\n  const resetDifficulty = React.useCallback(\n    () => setDifficulty(''),\n    [setDifficulty]\n  );\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center\">\n        {solution.current.map((piece, index) => (\n          <div\n            className={`game-piece ${String(piece)}`}\n            key={`solution-${String(piece)}-${String(index)}`}\n          />\n        ))}\n      </div>\n      <button\n        type=\"button\"\n        className=\"game-mode mx-auto w-48\"\n        onClick={resetDifficulty}\n      >\n        Play again?\n      </button>\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport Piece from './Piece';\nimport Row from '../row';\nimport Solution from '../solution';\n\ninterface Props {\n  pieces: React.MutableRefObject<string[]>;\n  setDifficulty: React.Dispatch<React.SetStateAction<string>>;\n  solution: React.MutableRefObject<string[]>;\n}\n\n/** Renders the Mastermind game */\nexport default function Mastermind({\n  pieces,\n  setDifficulty,\n  solution\n}: Props): JSX.Element {\n  const [activePiece, setActivePiece] = React.useState('');\n  const [activeRow, setActiveRow] = React.useState(0);\n  const [currentRow, setCurrentRow] = React.useState(['', '', '', '']);\n  const [won, setWon] = React.useState(false);\n\n  const hints = React.useRef<number[]>([0, 0, 0, 0]);\n  const previousHints = React.useRef<number[][]>([]);\n  const previousRows = React.useRef<string[][]>([]);\n\n  const checkSolution = React.useCallback(() => {\n    const currentRowCopy = [...currentRow];\n    const solutionCopy = [...solution.current];\n\n    for (let i = 0; i < 4; i++) {\n      if (currentRowCopy[i] === solutionCopy[i]) {\n        hints.current[i] = 2;\n        delete currentRowCopy[i];\n        delete solutionCopy[i];\n      }\n    }\n\n    currentRowCopy.forEach((_row, rowIndex) => {\n      solutionCopy.forEach((_solution, solutionindex) => {\n        if (currentRowCopy[rowIndex] === solutionCopy[solutionindex]) {\n          hints.current[rowIndex] = 1;\n          delete currentRowCopy[rowIndex];\n          delete solutionCopy[solutionindex];\n        }\n      });\n    });\n\n    hints.current.sort((a, b) => b - a);\n\n    setWon(true);\n    for (const l in hints.current) {\n      if (hints.current[l] < 2) {\n        setWon(false);\n        break;\n      }\n    }\n\n    previousHints.current.push(hints.current);\n    previousRows.current.push(currentRow);\n    hints.current = [0, 0, 0, 0];\n    setCurrentRow(['', '', '', '']);\n    setActiveRow(activeRow + 1);\n  }, [activeRow, currentRow, solution]);\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center\">\n        {pieces.current.map((piece) => (\n          <React.Fragment key={piece}>\n            <Piece\n              ariaLabel={piece}\n              className={`game-piece ${String(piece)} ${\n                piece === activePiece\n                  ? 'rounded-xl border-4 border-green-600'\n                  : ''\n              }`}\n              piece={piece}\n              setActivePiece={setActivePiece}\n            />\n          </React.Fragment>\n        ))}\n      </div>\n      {!won ? (\n        activeRow !== 10 ? (\n          <div className=\"grid grid-cols-1 justify-items-center lg:grid-cols-3\">\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((row, index) => (\n              <React.Fragment key={`row-${index}`}>\n                <Row\n                  activePiece={activePiece}\n                  activeRow={activeRow}\n                  checkSolution={checkSolution}\n                  currentRow={currentRow}\n                  previousHints={previousHints}\n                  previousRows={previousRows}\n                  row={row}\n                  setCurrentRow={setCurrentRow}\n                />\n              </React.Fragment>\n            ))}\n          </div>\n        ) : (\n          <>\n            <p>You lost! The solution was:</p>\n            <Solution setDifficulty={setDifficulty} solution={solution} />\n          </>\n        )\n      ) : (\n        <>\n          <p>You won! The solution was:</p>\n          <Solution setDifficulty={setDifficulty} solution={solution} />\n        </>\n      )}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport Mastermind from '../components/mastermind';\nimport SearchEngineOptimization from '../components/common/SearchEngineOptimization';\n\nimport { getRandomInt } from '../utils';\n\n/** Renders the home page with difficulty selection */\nexport default function Home(): JSX.Element {\n  const [difficulty, setDifficulty] = React.useState('');\n\n  const pieces = React.useRef<string[]>([]);\n  const solution = React.useRef<string[]>([]);\n\n  const easyDifficulty = React.useCallback(() => {\n    pieces.current = ['grape', 'mango', 'strawberry', 'pineapple'];\n\n    const newSolution = [];\n\n    for (let i = 0; i < 4; i++) {\n      newSolution.push(pieces.current[getRandomInt(4)]);\n    }\n\n    solution.current = newSolution;\n    setDifficulty('easy');\n  }, []);\n\n  const hardDifficulty = React.useCallback(() => {\n    pieces.current = ['grape', 'mango', 'strawberry', 'pineapple', 'lion'];\n\n    const newSolution = [];\n\n    for (let i = 0; i < 4; i++) {\n      newSolution.push(pieces.current[getRandomInt(5)]);\n    }\n\n    solution.current = newSolution;\n    setDifficulty('hard');\n  }, []);\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1\">\n        {!difficulty ? (\n          <>\n            <p className=\"text-center text-xl\">Choose a difficulty level...</p>\n            <div className=\"grid grid-cols-2\">\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={easyDifficulty}\n              >\n                Easy\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={hardDifficulty}\n              >\n                Hard\n              </button>\n            </div>\n          </>\n        ) : (\n          <Mastermind\n            pieces={pieces}\n            setDifficulty={setDifficulty}\n            solution={solution}\n          />\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["Piece","ariaLabel","className","piece","setActivePiece","onClick","React","type","activePiece","currentRow","disabled","setCurrentRow","currentRowCopy","Row","activeRow","checkSolution","previousHints","previousRows","row","previousButtons","hints","isActive","current","length","map","hint","index","determineHintColor","key","button","Solution","setDifficulty","solution","resetDifficulty","String","Mastermind","pieces","setActiveRow","won","setWon","solutionCopy","i","l","forEach","_row","rowIndex","_solution","solutionindex","sort","a","b","push","Home","difficulty","easyDifficulty","newSolution","getRandomInt","hardDifficulty","SearchEngineOptimization","title"],"sourceRoot":""}