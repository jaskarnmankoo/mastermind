{"version":3,"file":"component---src-pages-index-js-7baca45613d25872fa4f.js","mappings":"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","sources":["webpack://mastermind/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://mastermind/./src/components/Mastermind/colors.js","webpack://mastermind/./src/components/Mastermind/solution.js","webpack://mastermind/./src/components/Mastermind/board.js","webpack://mastermind/./src/components/Mastermind/index.js","webpack://mastermind/./src/pages/index.js"],"sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import * as React from 'react';\n\nexport const Colors = (props) => {\n  const allColors = props.list.map((color) => {\n    const active = color === props.activeColor ? 'active' : '';\n\n    return (\n      <button\n        className={`color-holder ${color} ${active}`}\n        aria-label={`color-holder ${color}`}\n        key={color}\n        onClick={() => {\n          props.action(color);\n        }}\n      />\n    );\n  });\n\n  return <div className=\"colors\">{allColors}</div>;\n};\n","import * as React from 'react';\n\nexport const Solution = (props) => {\n  let solutionPegs = [];\n  let solutionClass = '';\n  const isHidden = props.state.defeat && !props.state.victory ? '' : ' hidden';\n  const playAgain = props.state.defeat || props.state.victory ? '' : ' hidden';\n  for (let i = 0; i < props.state.trueRow.length; i++) {\n    solutionClass = props.state.trueRow[i];\n    solutionPegs.push(\n      <div className={'color-holder ' + solutionClass} key={'s_' + i}></div>\n    );\n  }\n  return (\n    <div className=\"solution colors\">\n      <div className={isHidden}>\n        <p className=\"text-xl\">Solution:</p>\n        {solutionPegs}\n      </div>\n      <div className={playAgain}>\n        <button className=\"game-mode mt-4\" onClick={props.newGame}>\n          Play Again?\n        </button>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\n\nexport class Board extends React.Component {\n  render() {\n    let rows = [];\n    for (let i = 0; i < this.props.state.totalRows; i++) {\n      rows.push(\n        <Row\n          key={'row_' + i}\n          id={'row_' + i}\n          state={this.props.state}\n          pegAction={this.props.pegAction}\n          checkAction={this.props.checkAction}\n        />\n      );\n    }\n    return <div className=\"board\">{rows}</div>;\n  }\n}\n\nconst Row = (props) => {\n  let active = '';\n  if (+props.id.substr(4) === props.state.activeRow) {\n    active = 'active';\n  }\n\n  return (\n    <div className={'row ' + active} id={props.id}>\n      <Circles\n        rowId={props.id}\n        state={props.state}\n        pegAction={props.pegAction}\n      />\n      <OkButton\n        state={props.state}\n        rowId={props.id}\n        checkAction={props.checkAction}\n      />\n      <Hints state={props.state} rowId={props.id} />\n    </div>\n  );\n};\n\nclass Circles extends React.Component {\n  render() {\n    const rowId = this.props.rowId.substr(4);\n    let Pegs = [];\n    for (let i = 0; i < 4; i++) {\n      Pegs.push(\n        <Peg\n          state={this.props.state}\n          pegAction={this.props.pegAction}\n          key={'p' + rowId + '-' + i}\n          pegId={'p' + rowId + '-' + i}\n        />\n      );\n    }\n\n    return <div className=\"circles\"> {Pegs} </div>;\n  }\n}\n\nclass Peg extends React.Component {\n  render() {\n    const pegId = +this.props.pegId.substr(this.props.pegId.indexOf('-') + 1);\n    const rowId = +this.props.pegId.substr(\n      1,\n      this.props.pegId.indexOf('-') - 1\n    );\n    let clase = '';\n    if (this.props.state.activeRow === rowId) {\n      clase = this.props.state.currentRow[pegId];\n    } else {\n      for (let i in this.props.state.previousRows) {\n        if (+i === +rowId) {\n          clase = this.props.state.previousRows[rowId][pegId];\n        }\n      }\n    }\n\n    return (\n      <button\n        id={this.props.pegId}\n        className={`peg ${clase}`}\n        aria-label={`peg ${clase}`}\n        onClick={() =>\n          this.props.pegAction(this.props.state.activeColor, this.props.pegId)\n        }\n      />\n    );\n  }\n}\n\nconst Hints = (props) => {\n  let allHints = [];\n  let hintClass = '';\n  const rowId = +props.rowId.substr(4);\n  const hintArr = props.state.hints;\n  const prevHints = props.state.previousHints;\n\n  for (let i = 0; i < hintArr.length; i++) {\n    if (rowId === props.state.activeRow) {\n      hintClass =\n        hintArr[i] === 2 ? 'exact' : hintArr[i] === 1 ? 'partial' : '';\n    } else {\n      for (let j = 0; j < prevHints.length; j++) {\n        if (rowId === j) {\n          hintClass =\n            prevHints[j][i] === 2\n              ? 'exact'\n              : prevHints[j][i] === 1\n              ? 'partial'\n              : '';\n        }\n      }\n    }\n\n    allHints.push(\n      <CheckBox\n        hintClass={hintClass}\n        key={'h_' + rowId + i}\n        id={'h_' + rowId + i}\n      />\n    );\n  }\n  return <div className=\"hints\">{allHints}</div>;\n};\n\nconst CheckBox = (props) => (\n  <span className={props.hintClass} id={props.id}></span>\n);\n\nconst OkButton = (props) => {\n  const row = +props.rowId.substr(4);\n  let disabled = 'disabled';\n  const doNothing = () => false;\n\n  if (props.state.activeRow === row) {\n    disabled = props.state.canCheck ? '' : 'disabled';\n  }\n  const checkAction = disabled === 'disabled' ? doNothing : props.checkAction;\n\n  return (\n    <button\n      className={`ok-button ${disabled}`}\n      aria-label=\"ok-button\"\n      onClick={checkAction}\n    >\n      check\n    </button>\n  );\n};\n","import * as React from 'react';\n\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.activateColor = this.activateColor.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.checkRow = this.checkRow.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.difficulty = props.difficulty;\n\n    let colors = [];\n    let pieces = 4;\n\n    // To add or remove pieces add/remove a color\n    // To add or remove pieces modify the 4 to a 3 or 6\n    if (props.difficulty === 'easy') {\n      colors = ['red', 'green', 'blue', 'orange'];\n      pieces = 3;\n    } else {\n      colors = ['red', 'green', 'blue', 'orange', 'purple'];\n      pieces = 4;\n    }\n\n    const trueRow = [];\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(colors[Math.floor(Math.random() * (pieces - 0 + 1)) + 0]);\n    }\n\n    this.state = {\n      colors: colors,\n      activeColor: 'red',\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      activeRow: 0,\n      totalRows: 10,\n      trueRow: trueRow,\n      canCheck: false,\n      victory: false,\n      defeat: false\n    };\n  }\n\n  activateColor(color) {\n    this.setState({\n      activeColor: color\n    });\n  }\n\n  setColor(color, id) {\n    if (this.state.victory) {\n      return false;\n    }\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let currentRow = this.state.currentRow;\n    let isArrayFull = 0;\n\n    if (this.state.activeRow === rowId && color) {\n      currentRow[pegId] = color;\n      this.setState({\n        currentRow: currentRow\n      });\n\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n      if (isArrayFull >= currentRow.length) {\n        this.setState({ canCheck: true });\n      } else {\n        this.setState({ canCheck: false });\n      }\n    }\n  }\n\n  checkRow() {\n    const currentRow = JSON.parse(JSON.stringify(this.state.currentRow));\n    const trueRow = JSON.parse(JSON.stringify(this.state.trueRow));\n    const hints = this.state.hints;\n    const previousHints = this.state.previousHints;\n    const previousRows = this.state.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (currentRow[i] === trueRow[i]) {\n        hints[i] = 2;\n        delete currentRow[i];\n        delete trueRow[i];\n      }\n    }\n\n    for (let i in currentRow) {\n      for (let j in trueRow) {\n        if (currentRow[i] === trueRow[j]) {\n          hints[i] = 1;\n          delete currentRow[i];\n          delete trueRow[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n\n    let victory = true;\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        victory = false;\n        break;\n      }\n    }\n\n    let defeat = this.state.defeat;\n    if (this.state.activeRow >= this.state.totalRows - 1) {\n      defeat = true;\n    }\n\n    previousHints.push(hints);\n    previousRows.push(this.state.currentRow);\n\n    this.setState({\n      hints: [0, 0, 0, 0],\n      activeRow: this.state.activeRow + 1,\n      previousHints: previousHints,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRows,\n      canCheck: false,\n      victory: victory,\n      defeat: defeat\n    });\n  }\n\n  newGame() {\n    let pieces = 4;\n\n    // To add or remove pieces add/remove a color\n    // To add or remove pieces modify the 4 to a 3 or 6\n    if (this.difficulty === 'easy') {\n      pieces = 3;\n    } else {\n      pieces = 4;\n    }\n\n    const trueRow = [];\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(\n        this.state.colors[Math.floor(Math.random() * (pieces - 0 + 1)) + 0]\n      );\n    }\n\n    this.setState({\n      activeRow: 0,\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      trueRow: trueRow,\n      canCheck: false,\n      victory: false,\n      defeat: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"game-container\">\n        <Colors\n          list={this.state.colors}\n          activeColor={this.state.activeColor}\n          action={this.activateColor}\n        />\n        <Board\n          state={this.state}\n          pegAction={this.setColor}\n          checkAction={this.checkRow}\n        />\n        <Solution state={this.state} newGame={this.newGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import * as React from 'react';\n\nimport Mastermind from '../components/Mastermind';\nimport SearchEngineOptimization from '../components/SearchEngineOptimization';\n\nexport default function Home() {\n  const [difficulty, setDifficulty] = React.useState('');\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1\">\n        {!difficulty ? (\n          <>\n            <p className=\"text-xl text-center\">Choose a difficulty level...</p>\n            <div className=\"grid grid-cols-2\">\n              <button\n                className=\"game-mode\"\n                onClick={() => setDifficulty('easy')}\n              >\n                Easy\n              </button>\n              <button\n                className=\"game-mode\"\n                onClick={() => setDifficulty('hard')}\n              >\n                Hard\n              </button>\n            </div>\n          </>\n        ) : (\n          <Mastermind difficulty={difficulty} />\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["_assertThisInitialized","self","ReferenceError","Colors","props","allColors","list","map","color","active","activeColor","className","key","onClick","action","Solution","solutionPegs","solutionClass","isHidden","state","defeat","victory","playAgain","i","trueRow","length","push","newGame","Board","render","rows","this","totalRows","Row","id","pegAction","checkAction","React","substr","activeRow","Circles","rowId","OkButton","Hints","Pegs","Peg","pegId","indexOf","clase","currentRow","previousRows","allHints","hintClass","hintArr","hints","prevHints","previousHints","j","CheckBox","row","disabled","canCheck","Game","activateColor","bind","setColor","checkRow","difficulty","colors","pieces","Math","floor","random","setState","isArrayFull","JSON","parse","stringify","sort","a","b","Home","setDifficulty","SearchEngineOptimization","title","Mastermind"],"sourceRoot":""}