{"version":3,"file":"component---src-pages-index-tsx-9382568a7cd8fb764762.js","mappings":"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","sources":["webpack://mastermind/./src/utils.ts","webpack://mastermind/./src/components/mastermind/Row.tsx","webpack://mastermind/./src/components/mastermind/Solution.tsx","webpack://mastermind/./src/components/mastermind/index.tsx","webpack://mastermind/./src/pages/index.tsx"],"sourcesContent":["export const ROUTES = {\n  HOME: '/'\n};\n\n/** Determines the color to show on a hint */\nexport const determineHintColor = (hint: number): string => {\n  switch (hint) {\n    case 0:\n      return '';\n    case 1:\n      return 'bg-yellow-400';\n    case 2:\n      return 'bg-green-600';\n    default:\n      return '';\n  }\n};\n\n/** Returns a random Int lower than max */\nexport const getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * max);\n};\n","import * as React from 'react';\n\nimport { determineHintColor } from '../../utils';\n\ninterface Props {\n  activePiece: string;\n  activeRow: number;\n  checkSolution: () => void;\n  currentRow: string[];\n  previousHints: React.MutableRefObject<number[][]>;\n  previousRows: React.MutableRefObject<string[][]>;\n  row: number;\n  setCurrentRow: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\n/** Renders a Row in Mastermind */\nexport default function Row({\n  activePiece,\n  activeRow,\n  checkSolution,\n  currentRow,\n  previousHints,\n  previousRows,\n  row,\n  setCurrentRow\n}: Props): JSX.Element {\n  let previousButtons: string[] = [];\n  let hints: number[] = [];\n\n  const isActive = activeRow === row;\n\n  /** Sets the piece in a Row */\n  const setPiece = (index: number) => {\n    const currentRowCopy = [...currentRow];\n    currentRowCopy[index] = activePiece;\n    setCurrentRow(currentRowCopy);\n  };\n\n  if (previousRows.current[row]) previousButtons = previousRows.current[row];\n  if (previousHints.current[row]) hints = previousHints.current[row];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {isActive && (\n        <>\n          <h1>Attempt {activeRow + 1}</h1>\n          <button\n            type=\"button\"\n            className=\"game-mode w-48 mx-auto\"\n            onClick={checkSolution}\n            disabled={\n              currentRow[0] === '' ||\n              currentRow[1] === '' ||\n              currentRow[2] === '' ||\n              currentRow[3] === ''\n            }\n          >\n            Check\n          </button>\n        </>\n      )}\n      {hints.length !== 0 && (\n        <div className=\"flex justify-center items-center w-full mx-auto\">\n          <p>Hints</p>&nbsp;\n          {hints.map((hint, index) => (\n            <span\n              className={`w-1 h-1 p-1 mx-1 border-2 border-black rounded-full dark:border-white ${determineHintColor(\n                hint\n              )}`}\n              key={`hint-${row}-${index}`}\n            />\n          ))}\n        </div>\n      )}\n      <div\n        className={`flex justify-center items-center w-full my-2 ${\n          isActive\n            ? 'border-solid border-black rounded-lg border-2 dark:border-white'\n            : ''\n        } ${previousButtons.length !== 0 ? 'p-2 my-0' : 'p-8 my-2'}`}\n      >\n        {previousButtons.length !== 0 ? (\n          <>\n            {previousButtons.map((button, index) => (\n              <div\n                className={`game-piece ${button}`}\n                key={`game-piece-${button}-${row}-${index}`}\n              />\n            ))}\n          </>\n        ) : (\n          <>\n            {[0, 1, 2, 3].map((button, index) => (\n              <React.Fragment key={`button-${index}`}>\n                <button\n                  type=\"button\"\n                  aria-label={`peg ${isActive ? currentRow[button] : ''}`}\n                  className={`game-piece ${isActive ? currentRow[button] : ''}`}\n                  disabled={!isActive || activePiece === currentRow[button]}\n                  onClick={() => setPiece(button)}\n                />\n              </React.Fragment>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\n\ninterface Props {\n  setDifficulty: React.Dispatch<React.SetStateAction<string>>;\n  solution: React.MutableRefObject<string[]>;\n}\n\n/** Renders the Mastermind solution */\nexport default function Solution({\n  setDifficulty,\n  solution\n}: Props): JSX.Element {\n  const resetDifficulty = React.useCallback(\n    () => setDifficulty(''),\n    [setDifficulty]\n  );\n\n  return (\n    <>\n      <div className=\"flex justify-center items-center\">\n        {solution.current.map((piece, index) => (\n          <div\n            className={`game-piece ${String(piece)}`}\n            key={`solution-${String(piece)}-${String(index)}`}\n          />\n        ))}\n      </div>\n      <button\n        type=\"button\"\n        className=\"game-mode mx-auto w-48\"\n        onClick={resetDifficulty}\n      >\n        Play again?\n      </button>\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport Row from './Row';\nimport Solution from './Solution';\n\ninterface Props {\n  pieces: React.MutableRefObject<string[]>;\n  setDifficulty: React.Dispatch<React.SetStateAction<string>>;\n  solution: React.MutableRefObject<string[]>;\n}\n\n/** Renders the Mastermind game */\nexport default function Mastermind({\n  pieces,\n  setDifficulty,\n  solution\n}: Props): JSX.Element {\n  const [activePiece, setActivePiece] = React.useState('');\n  const [activeRow, setActiveRow] = React.useState(0);\n  const [currentRow, setCurrentRow] = React.useState(['', '', '', '']);\n  const [won, setWon] = React.useState(false);\n\n  const hints = React.useRef<number[]>([0, 0, 0, 0]);\n  const previousHints = React.useRef<number[][]>([]);\n  const previousRows = React.useRef<string[][]>([]);\n\n  const checkSolution = React.useCallback(() => {\n    const currentRowCopy = [...currentRow];\n    const solutionCopy = [...solution.current];\n\n    for (let i = 0; i < 4; i++) {\n      if (currentRowCopy[i] === solutionCopy[i]) {\n        hints.current[i] = 2;\n        delete currentRowCopy[i];\n        delete solutionCopy[i];\n      }\n    }\n\n    currentRowCopy.forEach((_row, rowIndex) => {\n      solutionCopy.forEach((_solution, solutionindex) => {\n        if (currentRowCopy[rowIndex] === solutionCopy[solutionindex]) {\n          hints.current[rowIndex] = 1;\n          delete currentRowCopy[rowIndex];\n          delete solutionCopy[solutionindex];\n        }\n      });\n    });\n\n    hints.current.sort((a, b) => b - a);\n\n    setWon(true);\n    for (const l in hints.current) {\n      if (hints.current[l] < 2) {\n        setWon(false);\n        break;\n      }\n    }\n\n    previousHints.current.push(hints.current);\n    previousRows.current.push(currentRow);\n    hints.current = [0, 0, 0, 0];\n    setCurrentRow(['', '', '', '']);\n    setActiveRow(activeRow + 1);\n  }, [activeRow, currentRow, solution]);\n\n  return (\n    <>\n      <div className=\"flex justify-center items-center\">\n        {pieces.current.map((piece) => (\n          <button\n            type=\"button\"\n            className={`game-piece ${String(piece)} ${\n              piece === activePiece\n                ? 'border-green-600 rounded-xl border-4'\n                : ''\n            }`}\n            aria-label={piece}\n            key={piece}\n            onClick={() => setActivePiece(piece)}\n          />\n        ))}\n      </div>\n      {!won ? (\n        <>\n          {activeRow !== 10 ? (\n            <div className=\"grid grid-cols-1 justify-items-center lg:grid-cols-3\">\n              {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((row, index) => (\n                <React.Fragment key={`row-${index}`}>\n                  <Row\n                    activePiece={activePiece}\n                    activeRow={activeRow}\n                    checkSolution={checkSolution}\n                    currentRow={currentRow}\n                    previousHints={previousHints}\n                    previousRows={previousRows}\n                    row={row}\n                    setCurrentRow={setCurrentRow}\n                  />\n                </React.Fragment>\n              ))}\n            </div>\n          ) : (\n            <>\n              <p>You lost! The solution was:</p>\n              <Solution setDifficulty={setDifficulty} solution={solution} />\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <p>You won! The solution was:</p>\n          <Solution setDifficulty={setDifficulty} solution={solution} />\n        </>\n      )}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport Mastermind from '../components/mastermind';\nimport SearchEngineOptimization from '../components/common/SearchEngineOptimization';\n\nimport { getRandomInt } from '../utils';\n\n/** Renders the home page with difficulty selection */\nexport default function Home(): JSX.Element {\n  const [difficulty, setDifficulty] = React.useState('');\n\n  const pieces = React.useRef<string[]>([]);\n  const solution = React.useRef<string[]>([]);\n\n  const easyDifficulty = React.useCallback(() => {\n    pieces.current = ['grape', 'mango', 'strawberry', 'pineapple'];\n\n    const newSolution = [];\n\n    for (let i = 0; i < 4; i++) {\n      newSolution.push(pieces.current[getRandomInt(4)]);\n    }\n\n    solution.current = newSolution;\n    setDifficulty('easy');\n  }, []);\n\n  const hardDifficulty = React.useCallback(() => {\n    pieces.current = ['grape', 'mango', 'strawberry', 'pineapple', 'lion'];\n\n    const newSolution = [];\n\n    for (let i = 0; i < 4; i++) {\n      newSolution.push(pieces.current[getRandomInt(5)]);\n    }\n\n    solution.current = newSolution;\n    setDifficulty('hard');\n  }, []);\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1\">\n        {!difficulty ? (\n          <>\n            <p className=\"text-xl text-center\">Choose a difficulty level...</p>\n            <div className=\"grid grid-cols-2\">\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={easyDifficulty}\n              >\n                Easy\n              </button>\n              <button\n                type=\"button\"\n                className=\"game-mode\"\n                onClick={hardDifficulty}\n              >\n                Hard\n              </button>\n            </div>\n          </>\n        ) : (\n          <Mastermind\n            pieces={pieces}\n            setDifficulty={setDifficulty}\n            solution={solution}\n          />\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["determineHintColor","hint","getRandomInt","max","Math","floor","random","Row","activePiece","activeRow","checkSolution","currentRow","previousHints","previousRows","row","setCurrentRow","previousButtons","hints","isActive","current","className","type","onClick","disabled","length","map","index","key","button","currentRowCopy","setPiece","Solution","setDifficulty","solution","resetDifficulty","React","piece","String","Mastermind","pieces","setActivePiece","setActiveRow","won","setWon","solutionCopy","i","l","forEach","_row","rowIndex","_solution","solutionindex","sort","a","b","push","Home","difficulty","easyDifficulty","newSolution","hardDifficulty","SearchEngineOptimization","title"],"sourceRoot":""}